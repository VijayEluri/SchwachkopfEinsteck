<?xml version="1.0"?>
<!-- ant build file for SchwachkopfEinsteck -->

<project name="SchwachkopfEinsteck" default="dist" basedir=".">

    <property file="override.properties" />

    <property name="freenet-cvs-snapshot.location" location="../fred/dist/freenet.jar"/>
    <property name="freenet-ext.location" location="../fred/lib/freenet/freenet-ext.jar"/>
	<property name="svn.revision" value="@custom@"/>
	<property name="source-version" value="1.5"/>
	<property name="target-version" value="1.5"/>
	<property name="build" location="build/"/>
	<property name="build-test" location="build-test/"/>
	<property name="dist" location="dist/"/>
	<property name="src" location="src/"/>
	<property name="lib" location="osgi-lib/"/>
	<property name="junit.location" value="/usr/share/java/junit.jar"/>
	<property name="version.src" value="plugins/schwachkopfeinsteck/Version.java" />
	<property name="version.build" value="plugins/schwachkopfeinsteck/Version.class" />

	<available file="src/plugins/schwachkopfeinsteck/Version.java" property="version.present"/>
	<available file="${junit.location}" property="junit.present"/>

    <property name="bundle.jgit.version" value="4.1.1.201511131810-r"/>
    <property name="bundle.jgit.location" location="${lib}/org.eclipse.jgit-${bundle.jgit.version}.jar"/>
    <property name="bundle.jgit.location.ide" location="${lib}/org.eclipse.jgit.jar"/>

    <property name="bundle.slf4j.version" value="1.7.13"/>
    <property name="bundle.slf4j.location" location="${lib}/slf4j-api-${bundle.slf4j.version}.jar"/>

	<exec executable="git"
		failifexecutionfails="false"
		errorProperty="git.errror"
		outputproperty="git.describe"
		resultproperty="git.result">
		<arg value="describe" />
		<arg value="--always" />
		<arg value="--abbrev=4" />
	</exec>

	<condition property="git.revision" value="${git.describe}" else="@unknown@">
		<and>
			<equals arg1="${git.result}" arg2="0" />
			<isset property="git.describe" />
		</and>
	</condition>

	<target name="mkdir">
		<mkdir dir="${build}"/>
		<mkdir dir="${build-test}"/>
		<mkdir dir="${dist}"/>
		<mkdir dir="${lib}"/>
		<echo message="Using ${freenet-cvs-snapshot.location} as freenet-cvs-snapshot.jar"/>
		<echo message="Using ${freenet-ext.location} as freenet-ext.jar"/>
	</target>

	<target name="env" depends="mkdir"   description="Learn about the environment">
        <available file="${bundle.jgit.location}" property="bundle.jgit.present"/>
        <available file="${bundle.slf4j.location}" property="bundle.slf4j.present"/>
    </target>

	<target name="download-jgit" depends="env" unless="bundle.jgit.present" description="Get Jgit">
        <get src="https://repo.eclipse.org/content/groups/releases//org/eclipse/jgit/org.eclipse.jgit/${bundle.jgit.version}/org.eclipse.jgit-${bundle.jgit.version}.jar"
            dest="${bundle.jgit.location}"
            verbose="true"
            usetimestamp="true"/>
    </target>

	<target name="get-jgit" depends="download-jgit">
	    <!-- To Ease the build and update process the symlink is recreated each time -->
        <symlink link="${bundle.jgit.location.ide}" resource="${bundle.jgit.location}" overwrite="true" failonerror="true"/>
    </target>

	<target name="get-slf4j" depends="env" unless="bundle.slf4j.present" description="Get slf4j">
        <get src="https://repo1.maven.org/maven2/org/slf4j/slf4j-api/${bundle.slf4j.version}/slf4j-api-${bundle.slf4j.version}.jar"
            dest="${bundle.slf4j.location}"
            verbose="true"
            usetimestamp="true"/>
    </target>

	<!-- ================================================== -->
	<target name="compile" depends="mkdir" >
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->

		<!-- Create the Version file with patched revision number in ${build} -->
		<copy file="${src}/${version.src}" tofile="${build}/${version.src}" overwrite="true" />
		<delete file="${build}/${version.build}" quiet="true" />
		<replace file="${build}/${version.src}">
			<replacefilter token="@custom@" value="${git.revision}"/>
		</replace>
		<echo message="Updated build version to ${git.revision} in ${build}/${version.src}"/>

		<!-- Force compile of Version.java in case compile of ${src} didn't trigger it -->
		<javac srcdir="${build}" destdir="${build}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<classpath>
				<pathelement location="${freenet-ext.location}"/>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
			</classpath>
			<include name="${version.src}"/>
		</javac>

		<!-- FIXME: remove the debug and replace with optimize -->
		<javac srcdir="lib/jzlib/src/main/java" destdir="${build}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<classpath>
				<pathelement location="${freenet-ext.location}"/>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
			</classpath>
			<include name="**/*.java"/>
			<exclude name="**/*Test.java"/>
			<exclude name="${version.src}"/>
		</javac>

		<!-- FIXME: remove the debug and replace with optimize -->
		<javac srcdir="lib/jsch/src/main/java" destdir="${build}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<classpath>
				<pathelement location="${freenet-ext.location}"/>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
			</classpath>
			<include name="**/*.java"/>
			<exclude name="**/*Test.java"/>
			<exclude name="${version.src}"/>
		</javac>

		<!-- FIXME: remove the debug and replace with optimize -->
		<javac srcdir="lib/ernie/src" destdir="${build}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<classpath>
				<pathelement location="${freenet-ext.location}"/>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
			</classpath>
			<include name="**/*.java"/>
			<exclude name="**/*Test.java"/>
			<exclude name="${version.src}"/>
		</javac>

		<!-- FIXME: remove the debug and replace with optimize -->
		<javac srcdir="${src}" destdir="${build}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<classpath>
				<pathelement location="${freenet-ext.location}"/>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
				<pathelement location="${bundle.jgit.location}"/>
				<pathelement location="lib/jgit/org.eclipse.jgit/src"/>
			</classpath>
			<include name="**/*.java"/>
			<exclude name="**/*Test.java"/>
			<exclude name="${version.src}"/>
		</javac>
	</target>

	<!-- ================================================== -->

	<target name="unit-build" depends="compile" if="junit.present" unless="skip_tests">
		<javac srcdir="src/" destdir="${build-test}" debug="on" optimize="on" source="1.5">
			<classpath>
				<pathelement path="${build}"/>
				<pathelement location="${freenet-ext.location}"/>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
				<pathelement location="${junit.location}"/>
			</classpath>
			<compilerarg value="-Xlint"/>
			<include name="**/*Test.java"/>
		</javac>
	</target>

	<target name="junit" depends="unit-build" if="junit.present" unless="skip_tests">
		<junit printsummary="yes" fork="yes" haltonfailure="yes">
			<classpath>
				<pathelement path="${build}"/>
				<pathelement path="${build-test}"/>
				<pathelement location="${freenet-ext.location}"/>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
				<pathelement location="${junit.location}"/>
			</classpath>

			<formatter type="plain" usefile="false"/>

			<batchtest fork="yes">
				<fileset dir="${build-test}">
					<include name="**/*Test.class"/>
				</fileset>
			</batchtest>
			<sysproperty key="benchmark" value="${benchmark}" />
			<sysproperty key="extensiveTesting" value="${extensiveTesting}" />
		</junit>
	</target>

	<!-- ================================================== -->
	<target name="dist" depends="compile,get-jgit,get-slf4j"
		description="generate the distribution" >
		<jar jarfile="${dist}/SchwachkopfEinsteck.jar" duplicate="fail">
			<manifest>
				<attribute name="Plugin-Main-Class" value="plugins.schwachkopfeinsteck.GitPlugin"/>
			</manifest>
			<fileset dir="src/" casesensitive="no">
				<include name="*.txt"/>
			</fileset>
			<fileset dir="${build}/"/>
			<zipfileset src="${bundle.jgit.location}">
			    <include name="org/**"/>
			</zipfileset>
			<zipfileset src="${bundle.slf4j.location}">
                <include name="org/**"/>
            </zipfileset>
		</jar>
	</target>

	<!-- ================================================== -->
	<target name="clean" description="Delete class files and docs dir.">
		<delete dir="${build}"/>
		<delete dir="${build-test}"/>
		<delete dir="${dist}"/>
	</target>
</project>
